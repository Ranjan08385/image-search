{"version":3,"sources":["api/unsplash.js","pages/Search.js","pages/ImageCard.js","pages/imageList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","Search","state","text","event","preventDefault","this","props","onSubmit","className","style","position","top","zIndex","e","onSubmitForm","type","value","onChange","setState","target","Component","ImageCard","setSpans","height","imageRef","current","clientHeight","span","Math","ceil","console","log","React","createRef","addEventListener","image","description","urls","justifyContent","textAlign","ref","src","regular","alt","imageList","displayImage","data","map","images","key","id","App","searchData","onFormSubmit","a","get","params","query","response","results","marginTop","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+SAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,2BACTC,QAAS,CACLC,cAAe,2DCwBRC,G,WA1Bf,4MACIC,MAAQ,CAAEC,KAAM,IADpB,2DAGiBC,GACTA,EAAMC,iBACNC,KAAKC,MAAMC,SAASF,KAAKJ,MAAMC,QALvC,+BAQc,IAAD,OACL,OACI,yBAAKM,UAAU,aAAaC,MAAO,CAAEC,SAAU,SAAUC,IAAK,GAAIC,OAAQ,MACtE,0BAAMJ,UAAU,UAAUD,SAAU,SAACM,GAAD,OAAO,EAAKC,aAAaD,KACzD,yBAAKL,UAAU,SACX,+CACA,2BACIO,KAAK,OACLC,MAAOX,KAAKJ,MAAMC,KAClBe,SAAU,SAAAJ,GAAC,OAAI,EAAKK,SAAS,CAAEhB,KAAMW,EAAEM,OAAOH,kBAjB1E,GAA4BI,cC+BbC,EA/Bf,kDACI,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IASVgB,SAAW,WACP,IAAMC,EAAS,EAAKC,SAASC,QAAQC,aAC/BC,EAAOC,KAAKC,KAAKN,EAAS,IAChCO,QAAQC,IAAI,OAAQJ,GACpB,EAAKT,SAAS,CAAES,UAZhB,EAAK1B,MAAQ,CAAE0B,KAAM,GACrB,EAAKH,SAAWQ,IAAMC,YAHP,EADvB,gEAQQ5B,KAAKmB,SAASC,QAAQS,iBAAiB,OAAQ7B,KAAKiB,YAR5D,+BAiBc,IAAD,EACyBjB,KAAKC,MAAM6B,MAAjCC,EADH,EACGA,YAAaC,EADhB,EACgBA,KACrB,OACI,yBAAK5B,MAAO,CAAE6B,eAAgB,SAAUC,UAAW,WAC/C,yBACIC,IAAKnC,KAAKmB,SACViB,IAAKJ,EAAKK,QACVC,IAAKP,SAxBzB,GAA+BhB,aCgBhBwB,MAff,YAA4B,IAClBC,EADiB,EAAPC,KACUC,KAAI,SAAAC,GAC1B,OACI,yBAAKC,IAAKD,EAAOE,IACb,kBAAC,EAAD,CAAWf,MAAOa,QAI9B,OACI,yBAAKxC,UAAU,eACVqC,ICcEM,E,4MArBblD,MAAQ,CAAEmD,WAAY,I,EAEtBC,a,uCAAe,WAAOnD,GAAP,eAAAoD,EAAA,sEACS3D,EAAM4D,IAAI,iBAAkB,CAChDC,OAAQ,CAAEC,MAAOvD,KAFN,OACRwD,EADQ,OAKb,EAAKxC,SAAS,CAAEkC,WAAYM,EAASZ,KAAKa,UAL7B,2C,6GASb,OACE,yBAAKnD,UAAU,eAAeC,MAAO,CAAEmD,UAAW,SACjD,kBAAC,EAAD,CAAWrD,SAAUF,KAAKgD,eACzB,uBAAG5C,MAAO,CAAC8B,UAAW,WAAtB,WAA0ClC,KAAKJ,MAAMmD,WAAWS,OAAhE,WACD,kBAAC,EAAD,CAAWf,KAAMzC,KAAKJ,MAAMmD,kB,GAhBjBpB,IAAMZ,WCMJ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.9ddcf02b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.unsplash.com',\r\n    headers: {\r\n        Authorization: \"Client-ID fGnRi5sjMg0myU0vwphiAJe2a2orCA09MzHnGJLTWDs\"\r\n    }\r\n});","import React, { Component } from 'react'\r\nimport './Style.css'\r\n\r\nexport class Search extends Component {\r\n    state = { text: '' }\r\n\r\n    onSubmitForm(event) {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui segment\" style={{ position: 'sticky', top: 10, zIndex: 999 }}>\r\n                <form className=\"ui form\" onSubmit={(e) => this.onSubmitForm(e)}>\r\n                    <div className=\"field\">\r\n                        <label>Image Search</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            value={this.state.text}\r\n                            onChange={e => this.setState({ text: e.target.value })} \r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport './Style.css'\r\n\r\nexport class ImageCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { span: 0 };\r\n        this.imageRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.imageRef.current.addEventListener('load', this.setSpans);\r\n    }\r\n\r\n    setSpans = () => {\r\n        const height = this.imageRef.current.clientHeight;\r\n        const span = Math.ceil(height / 10);\r\n        console.log('span', span);\r\n        this.setState({ span });\r\n    }\r\n    render() {\r\n        const { description, urls } = this.props.image;\r\n        return (\r\n            <div style={{ justifyContent: 'center', textAlign: 'center' }}>\r\n                <img \r\n                    ref={this.imageRef}\r\n                    src={urls.regular}\r\n                    alt={description}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageCard\r\n","import React from 'react'\r\nimport './Style.css'\r\nimport ImageCard from './ImageCard'\r\n\r\nfunction imageList({data}) {\r\n    const displayImage = data.map(images => {\r\n        return (\r\n            <div key={images.id}>\r\n                <ImageCard image={images} />\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"image__list\">\r\n            {displayImage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default imageList\r\n","import React from \"react\";\nimport axios from './api/unsplash';\nimport \"./App.css\";\nimport SearchBar from './pages/Search';\nimport ImageList from './pages/imageList';\n\nclass App extends React.Component {\n  state = { searchData: [] };\n  \n  onFormSubmit = async (text) => {\n   const response = await axios.get('/search/photos', {\n      params: { query: text }\n    });\n\n    this.setState({ searchData: response.data.results })\n  }\n\n  render() {\n    return (\n      <div className=\"ui container\" style={{ marginTop: '10px' }}>\n       <SearchBar onSubmit={this.onFormSubmit} />\n        <p style={{textAlign: 'center'}}>Found : {this.state.searchData.length} images</p> \n       <ImageList data={this.state.searchData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}